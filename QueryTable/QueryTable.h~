#include "./CountTrie/CountTrie.h"
#include <boost/thread.hpp>  
#include <boost/thread/mutex.hpp>     
#include <map>
#include <string>  
#include <iostream>  

namespace sharedon
{

/*     
typedef boost::shared_mutex         WRMutex;
typedef boost::unique_lock<WRMutex> WLock;
typedef boost::shared_lock<WRMutex> RLock;
*/
class QueryTable
{
  typedef std::map<std::string, CountTrie* >           Table;
  typedef std::map<std::string, CountTrie* >::iterator TableIter;
  
public:     
  QueryTable() {}
  ~QueryTable();

  bool isFileExist   (const std::string& fileName)
    { return _queryTable.count(fileName) > 0 ? true : false; }
  int  addToFile     (const std::string& fileName, const std::string& address);
  int  deleteFromFile(const std::string& fileName, const std::string& address);
  bool isAddrHasFile (const std::string& fileName, const std::string& address); 
/*
  int queryFile     (const std::string& fileName, const std::string& address, 
                     int num, std::vector<std::string>& result);
*/

private:
  Table   _queryTable;
//  WRMutex _wrMutex;
  
};

int QueryTable::addToFile(const std::string& fileName, 
                          const std::string& address)
{
//  WLock lockWrite(_wrMutex);
  
  if (isFileExist(fileName) == true) {
    return _queryTable[fileName]->insertEntry(address);
  } else {
    CountTrie *newFile = new CountTrie;
    _queryTable[fileName] = newFile;
    return _queryTable[fileName]->insertEntry(address);
  }
}

int QueryTable::deleteFromFile(const std::string& fileName, 
                               const std::string& address)
{
//  WLock lockWrite(_wrMutex);
  
  if (isFileExist(fileName) == false) {
    return -1;
  } else {
    CountTrie *file = _queryTable[fileName];
    if (file->deleteEntry(address) == -1) {
      return -1;
    }
    if (file->getCount() == 0) {
      delete file;
      _queryTable.erase(fileName);
    }
    return 0;
  }
}

bool QueryTable::isAddrHasFile(const std::string& fileName,
                   const std::string& address)
{
//  RLock lockRead(_wrMutex);

  if (isFileExist(fileName) == false) {
    return false;
  } else {
    return _queryTable[fileName]->findEntry(address);
  }
}

QueryTable::~QueryTable()
{
  for (TableIter it = _queryTable.begin(); it != _queryTable.end(); it++) {
    delete it->second;
  }
}

/*
int QueryTable::queryFile(const std::string& fileName, 
                          const std::string& address, 
                          int num, 
                          std::vector<std::string>& result)
{
  RLock lockRead(_wrMutex);
  
  if (_queryTable.count(fileName) == 0) {
    return -1;
  } else {
    return _queryTable[fileName]->findClosestEntries(address, num, result);
  }                     
}
*/

} // namespace sharedon end


